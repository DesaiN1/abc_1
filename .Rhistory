my_colors <- rainbow(length(bottom_15$total_obs_value))
# Define modified theme with left-aligned plot title
my_theme <- theme_minimal() +
theme(plot.title = element_text(hjust = 0))
bar_chart <- ggplot(bottom_30, aes(x = reorder(country, total_obs_value), y = total_obs_value, fill = total_obs_value)) +
geom_bar(stat = "identity") +
coord_flip() +
scale_fill_gradientn(colors = my_colors) +
labs(title = "15 Countries with the Lowest Obs. Value",
x = "Country Names",
y = "Obvservation Values") +
my_theme +
geom_text(aes(label = round(total_obs_value, 1)), hjust = -0.2, size = 3, color = "black")
bar_chart
nrow(bottom_30)
bottom_30
head(bottom_30, n = 20)
library(ggplot2)
my_colors <- rainbow(length(bottom_15$total_obs_value))
my_theme <- theme_minimal() +
theme(plot.title = element_text(hjust = 0))
bar_chart <- ggplot(bottom_30, aes(x = reorder(country, total_obs_value), y = total_obs_value, fill = total_obs_value)) +
geom_bar(stat = "identity") +
coord_flip() +
scale_fill_gradientn(colors = my_colors) +
labs(title = "20 Countries with the Lowest Obs. Value",
x = "Country Names",
y = "Obvservation Values") +
my_theme +
geom_text(aes(label = round(total_obs_value, 1)), hjust = -0.2, size = 3, color = "black")
bar_chart
#Install and load the following packages
install.packages("tidyverse")
library(tidyverse)
install.packages("sf")
library(sf)
install.packages("rnaturalearth")
library(rnaturalearth)
install.packages("lwgeom")
install.packages("sf")
library(lwgeom)
install.packages("dplyr")
library(dplyr)
install.packages("readr")
library(readr)
install.packages("tidyr")
library(tidyr)
# Import the unicef_indicator_2.csv file
data <- read_csv("unicef_indicator_2.csv")
# Clean and transform the data
clean_data <- data %>%
drop_na() %>%
filter(!is.na(obs_value) & obs_value >= 0)
#1. World Map Plot Visualization
# Filter for the top 25 countries with the highest total_obs_value
top_25 <- clean_data %>%
group_by(country) %>%
summarise(total_obs_value = sum(obs_value)) %>%
top_n(25, total_obs_value)
#Reloading packages for Map visualization
install.packages("rnaturalearth")
library(rnaturalearth)
library(magrittr)
install.packages("sf")
library(sf)
# Load World Map dataset and make the geometry valid
world_map <- rnaturalearth::ne_countries(scale = "medium", returnclass = "sf") %>%
st_make_valid()
install.packages("dplyr")
library(dplyr)
# Create a lookup table to map country names to ISO A3 codes and join with top_25
top_25 <- top_25 %>%
left_join(world_map %>% select(iso_a3, name_long) %>% distinct(), by = c("country" = "name_long"))
# Merge world_map and top_25 data frames
merged_data <- left_join(world_map, top_25, by = c("iso_a3" = "iso_a3"))
install.packages("ggplot2")
library(ggplot2)
library(sf)
library(dplyr)
# Plot 25 countries with the highest obs_value
world_map_chart <- ggplot(merged_data) +
geom_sf(aes(fill = total_obs_value), color = "black") +
scale_fill_gradientn(colors = c("purple", "blue", "green", "orange"), na.value = "grey", name = "Obs Value") +
labs(title = "Top 25 Countries with the BMI Value <- 1 SD") +
theme_void() +
theme(plot.title = element_text(hjust = 0.5))
# Print the plots
world_map_chart
# 2.Scatter Plot Visualization
# Load data file
unicef_metadata <- read.csv("unicef_metadata.csv")
data_selected <- unicef_metadata %>%
select(country, Population..total, Life.expectancy.at.birth..total..years. )
# Load the clean data and add a row number column
clean_data$id <- 1:nrow(clean_data)
library(dplyr)
# Join the two datasets on the row number column
data_combined <- left_join(data_selected, clean_data, by = "country",relationship = "many-to-many")
# Create the scatter plot with linear regression line
ggplot(data_combined, aes(x = Life.expectancy.at.birth..total..years., y = Population..total, color = obs_value )) +
geom_point(size = 2) +
geom_smooth(method = "lm", formula = y ~ x, se = FALSE, color = "green") +
scale_color_gradient(low = "purple", high = "red", na.value = "black", name = "Obs Value") +
ggtitle("Population and Life Expectancy by Observed Value") +
xlab("Life Expectancy at Birth (Years)") +
ylab("Total Population (Numbers)") +
theme_minimal()
# 3.Time Series Plot Visualization
# Filter data for specific time periods
time_periods <- c("1991","1995", "2000", "2005", "2010","2015","2020")
#clean the filtered data for selected time period
clean_data_filtered <- clean_data %>%
filter(time_period %in% time_periods)
# Print message to inform user about filtered time periods
message("Data filtered for the following time periods: ", paste(time_periods, collapse = ", "))
# Create the time series chart with facets for time period
ggplot(clean_data_filtered, aes(x = time_period  , y = obs_value , group =country, color = time_period )) +
geom_line() +
facet_wrap(~ indicator, ncol = 3) +
ggtitle("Time Series Chart of Obs. Value for Country by Time Period") +
xlab("Time Period (Years)") +
ylab("Observed Values (Unit)") +
theme_bw()
# Visualization for Time Series Chart with a Smooth Trend Line
ggplot(clean_data_filtered, aes(x = time_period, y = obs_value, group = time_period, color = time_period)) +
geom_line() +
facet_wrap(~ indicator, ncol = 3) +
geom_smooth(aes(group = 1), method = "loess", se = TRUE, color = "black") +
ggtitle("Time Series Chart of Obs. Value with Smooth Trend Line") +
xlab("Time Period (Years)") +
ylab("Observed Value (Unit)") +
theme_bw()
#4. Bar Plot Visualization
# Assuming `clean_data` is a dataset that has already been processed and cleaned
bottom_30 <- clean_data %>%
group_by(country) %>%
summarise(mean_obs_value = mean(obs_value)) %>%
arrange(mean_obs_value) %>%
head(30)
library(dplyr)
# Sort merged_data by total_obs_value in ascending order and select the first 15 rows
bottom_30 <- merged_data %>%
arrange(total_obs_value) %>%
head(30)
# Unique datasets in the data
length(unique(data_selected$country))
# View the bottom 20 countries
nrow(bottom_30)
bottom_30
head(bottom_30, n = 20)
library(ggplot2)
# Create bar plot with gradient fill and text labels
# Define color scale
my_colors <- rainbow(length(bottom_15$total_obs_value))
# Define modified theme with left-aligned plot title
my_theme <- theme_minimal() +
theme(plot.title = element_text(hjust = 0))
# Create bar chart with modified theme
bar_chart <- ggplot(bottom_30, aes(x = reorder(country, total_obs_value), y = total_obs_value, fill = total_obs_value)) +
geom_bar(stat = "identity") +
coord_flip() +
scale_fill_gradientn(colors = my_colors) +
labs(title = "20 Countries with the Lowest Obs. Value",
x = "Country Names",
y = "Obvservation Values") +
my_theme +
geom_text(aes(label = round(total_obs_value, 1)), hjust = -0.2, size = 3, color = "black")
bar_chart
# The End of Code
install.packages("ggplot2")
install.packages("dplyr")
install.packages("sf")
install.packages("rnaturalearth")
install.packages("tidyr")
install.packages("dplyr")
install.packages("readr")
install.packages("rnaturalearth")
#Install and load the following packages
install.packages("tidyverse")
library(tidyverse)
install.packages("sf")
library(sf)
install.packages("rnaturalearth")
library(rnaturalearth)
install.packages("lwgeom")
library(lwgeom)
install.packages("dplyr")
library(dplyr)
install.packages("readr")
library(readr)
install.packages("tidyr")
library(tidyr)
# Import the unicef_indicator_2.csv file
data <- read_csv("unicef_indicator_2.csv")
# Clean and transform the data
clean_data <- data %>%
drop_na() %>%
filter(!is.na(obs_value) & obs_value >= 0)
#1. World Map Plot Visualization
# Filter for the top 25 countries with the highest total_obs_value
top_25 <- clean_data %>%
group_by(country) %>%
summarise(total_obs_value = sum(obs_value)) %>%
top_n(25, total_obs_value)
#Reloading packages for Map visualization
install.packages("rnaturalearth")
library(rnaturalearth)
library(magrittr)
install.packages("sf")
library(sf)
# Load World Map dataset and make the geometry valid
world_map <- rnaturalearth::ne_countries(scale = "medium", returnclass = "sf") %>%
st_make_valid()
install.packages("dplyr")
library(dplyr)
# Create a lookup table to map country names to ISO A3 codes and join with top_25
top_25 <- top_25 %>%
left_join(world_map %>% select(iso_a3, name_long) %>% distinct(), by = c("country" = "name_long"))
# Merge world_map and top_25 data frames
merged_data <- left_join(world_map, top_25, by = c("iso_a3" = "iso_a3"))
install.packages("ggplot2")
library(ggplot2)
library(sf)
library(dplyr)
# Plot 25 countries with the highest obs_value
world_map_chart <- ggplot(merged_data) +
geom_sf(aes(fill = total_obs_value), color = "black") +
scale_fill_gradientn(colors = c("purple", "blue", "green", "orange"), na.value = "grey", name = "Obs Value") +
labs(title = "Top 25 Countries with the BMI Value <- 1 SD") +
theme_void() +
theme(plot.title = element_text(hjust = 0.5))
# Print the plots
world_map_chart
# 2.Scatter Plot Visualization
# Load data file
unicef_metadata <- read.csv("unicef_metadata.csv")
data_selected <- unicef_metadata %>%
select(country, Population..total, Life.expectancy.at.birth..total..years. )
# Load the clean data and add a row number column
clean_data$id <- 1:nrow(clean_data)
library(dplyr)
# Join the two datasets on the row number column
data_combined <- left_join(data_selected, clean_data, by = "country",relationship = "many-to-many")
# Create the scatter plot with linear regression line
ggplot(data_combined, aes(x = Life.expectancy.at.birth..total..years., y = Population..total, color = obs_value )) +
geom_point(size = 2) +
geom_smooth(method = "lm", formula = y ~ x, se = FALSE, color = "green") +
scale_color_gradient(low = "purple", high = "red", na.value = "black", name = "Obs Value") +
ggtitle("Population and Life Expectancy by Observed Value") +
xlab("Life Expectancy at Birth (Years)") +
ylab("Total Population (Numbers)") +
theme_minimal()
# 3.Time Series Plot Visualization
# Filter data for specific time periods
time_periods <- c("1991","1995", "2000", "2005", "2010","2015","2020")
#clean the filtered data for selected time period
clean_data_filtered <- clean_data %>%
filter(time_period %in% time_periods)
# Print message to inform user about filtered time periods
message("Data filtered for the following time periods: ", paste(time_periods, collapse = ", "))
# Create the time series chart with facets for time period
ggplot(clean_data_filtered, aes(x = time_period  , y = obs_value , group =country, color = time_period )) +
geom_line() +
facet_wrap(~ indicator, ncol = 3) +
ggtitle("Time Series Chart of Obs. Value for Country by Time Period") +
xlab("Time Period (Years)") +
ylab("Observed Values (Unit)") +
theme_bw()
# Visualization for Time Series Chart with a Smooth Trend Line
ggplot(clean_data_filtered, aes(x = time_period, y = obs_value, group = time_period, color = time_period)) +
geom_line() +
facet_wrap(~ indicator, ncol = 3) +
geom_smooth(aes(group = 1), method = "loess", se = TRUE, color = "black") +
ggtitle("Time Series Chart of Obs. Value with Smooth Trend Line") +
xlab("Time Period (Years)") +
ylab("Observed Value (Unit)") +
theme_bw()
install.packages("sf")
save.image("D:/Nishigandha/Dublin Stuff/DCU Study Work/Semester_2/3. Data Analytics & Visualization/Assignment- 2/An Insight into Malnutrition_Analyzing UNICEF Data/DA Assignment_2/Global Files.RData")
install.packages("rnaturalearth")
install.packages("lwgeom")
install.packages("dplyr")
install.packages("dplyr")
install.packages("tidyr")
install.packages("readr")
install.packages("rnaturalearth")
install.packages("ggplot2")
install.packages("sf")
install.packages("dplyr")
install.packages("tidyverse")
library(tidyverse)
install.packages("sf")
library(sf)
install.packages("rnaturalearth")
library(rnaturalearth)
install.packages("lwgeom")
library(lwgeom)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
install.packages("readr")
library(readr)
install.packages("tidyr")
library(tidyr)
data <- read_csv("unicef_indicator_2.csv")
clean_data <- data %>%
drop_na() %>%
filter(!is.na(obs_value) & obs_value >= 0)
top_25 <- clean_data %>%
group_by(country) %>%
summarise(total_obs_value = sum(obs_value)) %>%
top_n(25, total_obs_value)
world_map <- rnaturalearth::ne_countries(scale = "medium", returnclass = "sf") %>%
st_make_valid()
install.packages("sf")
install.packages("sf")
#Install and load the following packages
install.packages("tidyverse")
library(tidyverse)
install.packages("sf")
library(sf)
install.packages("rnaturalearth")
library(rnaturalearth)
install.packages("lwgeom")
library(lwgeom)
install.packages("dplyr")
library(dplyr)
install.packages("readr")
library(readr)
install.packages("tidyr")
library(tidyr)
install.packages("tidyr")
install.packages("readr")
install.packages("dplyr")
install.packages("rnaturalearth")
install.packages("sf")
#Install and load the following packages
install.packages("tidyverse")
library(tidyverse)
install.packages("sf")
library(sf)
install.packages("rnaturalearth")
library(rnaturalearth)
install.packages("lwgeom")
library(lwgeom)
install.packages("dplyr")
library(dplyr)
install.packages("readr")
library(readr)
install.packages("tidyr")
library(tidyr)
install.packages("tidyr")
install.packages("dplyr")
install.packages("lwgeom")
install.packages("rnaturalearth")
install.packages("sf")
install.packages("tidyverse")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
knitr::opts_chunk$set(echo = TRUE)
#Install and load the following packages
install.packages("tidyverse")
library(tidyverse)
install.packages("sf")
library(sf)
install.packages("rnaturalearth")
library(rnaturalearth)
install.packages("lwgeom")
library(lwgeom)
install.packages("dplyr")
library(dplyr)
install.packages("readr")
library(readr)
install.packages("tidyr")
library(tidyr)
# Import the unicef_indicator_2.csv file
data <- read_csv("unicef_indicator_2.csv")
# Clean and transform the data
clean_data <- data %>%
drop_na() %>%
filter(!is.na(obs_value) & obs_value >= 0)
#1. World Map Plot Visualization
# Filter for the top 25 countries with the highest total_obs_value
top_25 <- clean_data %>%
group_by(country) %>%
summarise(total_obs_value = sum(obs_value)) %>%
top_n(25, total_obs_value)
#Reloading packages for Map visualization
install.packages("rnaturalearth")
library(rnaturalearth)
library(magrittr)
install.packages("sf")
library(sf)
# Load World Map dataset and make the geometry valid
world_map <- rnaturalearth::ne_countries(scale = "medium", returnclass = "sf") %>%
st_make_valid()
install.packages("dplyr")
library(dplyr)
# Create a lookup table to map country names to ISO A3 codes and join with top_25
top_25 <- top_25 %>%
left_join(world_map %>% select(iso_a3, name_long) %>% distinct(), by = c("country" = "name_long"))
# Merge world_map and top_25 data frames
merged_data <- left_join(world_map, top_25, by = c("iso_a3" = "iso_a3"))
install.packages("ggplot2")
library(ggplot2)
library(sf)
library(dplyr)
# Plot 25 countries with the highest obs_value
world_map_chart <- ggplot(merged_data) +
geom_sf(aes(fill = total_obs_value), color = "black") +
scale_fill_gradientn(colors = c("purple", "blue", "green", "orange"), na.value = "grey", name = "Obs Value") +
labs(title = "Top 25 Countries with the BMI Value <- 1 SD") +
theme_void() +
theme(plot.title = element_text(hjust = 0.5))
# Print the plots
world_map_chart
# 2.Scatter Plot Visualization
# Load data file
unicef_metadata <- read.csv("unicef_metadata.csv")
data_selected <- unicef_metadata %>%
select(country, Population..total, Life.expectancy.at.birth..total..years. )
# Load the clean data and add a row number column
clean_data$id <- 1:nrow(clean_data)
library(dplyr)
# Join the two datasets on the row number column
data_combined <- left_join(data_selected, clean_data, by = "country",relationship = "many-to-many")
# Create the scatter plot with linear regression line
ggplot(data_combined, aes(x = Life.expectancy.at.birth..total..years., y = Population..total, color = obs_value )) +
geom_point(size = 2) +
geom_smooth(method = "lm", formula = y ~ x, se = FALSE, color = "green") +
scale_color_gradient(low = "purple", high = "red", na.value = "black", name = "Obs Value") +
ggtitle("Population and Life Expectancy by Observed Value") +
xlab("Life Expectancy at Birth (Years)") +
ylab("Total Population (Numbers)") +
theme_minimal()
install.packages("ggplot2")
install.packages("dplyr")
install.packages("sf")
install.packages("rnaturalearth")
install.packages("dplyr")
install.packages("tidyr")
install.packages("readr")
# 3.Time Series Plot Visualization
# Filter data for specific time periods
time_periods <- c("1991","1995", "2000", "2005", "2010","2015","2020")
#clean the filtered data for selected time period
clean_data_filtered <- clean_data %>%
filter(time_period %in% time_periods)
# Print message to inform user about filtered time periods
message("Data filtered for the following time periods: ", paste(time_periods, collapse = ", "))
# Create the time series chart with facets for time period
ggplot(clean_data_filtered, aes(x = time_period  , y = obs_value , group =country, color = time_period )) +
geom_line() +
facet_wrap(~ indicator, ncol = 3) +
ggtitle("Time Series Chart of Obs. Value for Country by Time Period") +
xlab("Time Period (Years)") +
ylab("Observed Values (Unit)") +
theme_bw()
# Visualization for Time Series Chart with a Smooth Trend Line
ggplot(clean_data_filtered, aes(x = time_period, y = obs_value, group = time_period, color = time_period)) +
geom_line() +
facet_wrap(~ indicator, ncol = 3) +
geom_smooth(aes(group = 1), method = "loess", se = TRUE, color = "black") +
ggtitle("Time Series Chart of Obs. Value with Smooth Trend Line") +
xlab("Time Period (Years)") +
ylab("Observed Value (Unit)") +
theme_bw()
#4. Bar Plot Visualization
# Assuming `clean_data` is a dataset that has already been processed and cleaned
bottom_30 <- clean_data %>%
group_by(country) %>%
summarise(mean_obs_value = mean(obs_value)) %>%
arrange(mean_obs_value) %>%
head(30)
library(dplyr)
# Sort merged_data by total_obs_value in ascending order and select the first 15 rows
bottom_30 <- merged_data %>%
arrange(total_obs_value) %>%
head(30)
# Unique datasets in the data
length(unique(data_selected$country))
# View the bottom 20 countries
nrow(bottom_30)
bottom_30
head(bottom_30, n = 20)
library(ggplot2)
# Create bar plot with gradient fill and text labels
# Define color scale
my_colors <- rainbow(length(bottom_15$total_obs_value))
# Define modified theme with left-aligned plot title
my_theme <- theme_minimal() +
theme(plot.title = element_text(hjust = 0))
# Create bar chart with modified theme
bar_chart <- ggplot(bottom_30, aes(x = reorder(country, total_obs_value), y = total_obs_value, fill = total_obs_value)) +
geom_bar(stat = "identity") +
coord_flip() +
scale_fill_gradientn(colors = my_colors) +
labs(title = "20 Countries with the Lowest Obs. Value",
x = "Country Names",
y = "Obvservation Values") +
my_theme +
geom_text(aes(label = round(total_obs_value, 1)), hjust = -0.2, size = 3, color = "black")
bar_chart
# The End of Code
install.packages("dplyr")
install.packages("readr")
install.packages("tidyr")
install.packages("rnaturalearth")
install.packages("sf")
install.packages("dplyr")
